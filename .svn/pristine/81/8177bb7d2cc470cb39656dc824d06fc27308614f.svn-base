<?php

class EntryController extends Controller
{
	/**
	 * @var string the default layout for the views. Defaults to '//layouts/column2', meaning
	 * using two-column layout. See 'protected/views/layouts/column2.php'.
	 */
	public $layout='//layouts/column2';

	/**
	 * @return array action filters
	 */
	public function filters()
	{
		return array(
			'accessControl', // perform access control for CRUD operations
			'postOnly + delete', // we only allow deletion via POST request
		);
	}

	/**
	 * Specifies the access control rules.
	 * This method is used by the 'accessControl' filter.
	 * @return array access control rules
	 */
	public function accessRules()
	{
		return array(
			array('allow',  // allow all users to perform 'index' and 'view' actions
				'actions'=>array('index','view'),
				'users'=>array('*'),
			),
			array('allow', // allow authenticated user to perform 'create' and 'update' actions
				'actions'=>array('create','update','upload','cropImage','editImage','removeImage','rotateImage','loadImage','admin','delete'),
				'users'=>array('@'),
			),
			array('allow', // allow admin user to perform 'admin' and 'delete' actions
				'actions'=>array('admin','delete'),
				'users'=>array('admin'),
			),
			array('deny',  // deny all users
				'users'=>array('*'),
			),
		);
	}
        
        private $p_id;
        
        /*Eajaxupload*/
        public function actionUpload()
	{
            Yii::import("ext.EAjaxUpload.qqFileUploader");
            $folder='upload/';// folder for uploaded files
            $allowedExtensions = array("jpg");//array("jpg","jpeg","gif","exe","mov" and etc...
            $sizeLimit = 10 * 1024 * 1024;// maximum file size in bytes
            //$mySize = new qqUploadedFileForm();								
            $uploader = new qqFileUploader($allowedExtensions, $sizeLimit);
            $result = $uploader->handleUpload($folder);
            if($result['success']){
                $s3Name = Yii::app()->user->id."_".time().'.'.$result['ext'];
                $s3Bucket = "golifted.com_upload";
                $success = Yii::app()->s3->upload( 'upload/'.$result['filename'] ,$s3Name , $s3Bucket );
                if($success){
                    
                     // original image
                    
                    $orientation = ($result['width'] > $result['height']) ? 0 : 1;
                                        
                    $photo = new Photo();
                    $photo->bytes= filesize('upload/'.$result['filename']);
                    unlink('upload/'.$result['filename']); 
                    $result['filename']="http://s3.amazonaws.com/$s3Bucket/$s3Name"; 
                    $photo->fileName = $result['filename'];
                    $photo->fileExtension = $result['ext'];
                    $photo->s3Key = $s3Name;
                    $photo->s3Bucket = $s3Bucket;
                    $photo->isPortrait = $orientation;
                    $photo->userId = Yii::app()->user->id;
                    $photo->save();  
                    $result['id'] = $photo->id;
                    $this->p_id = $photo->id;
                }
                else {
                     unlink('upload/'.$result['filename']);
                     $result= array('error'=>'Amazon s3 failed to save file');
                }
                $return = htmlspecialchars(json_encode($result), ENT_NOQUOTES);
            }	
            echo $return;// it's array			
	}

	/**
	 * Displays a particular model.
	 * @param integer $id the ID of the model to be displayed
	 */
	public function actionView($id)
	{
            $this->render('view',array(
                    'model'=>$this->loadModel($id),
            ));
	}
        
        
	/**
	 * Creates a new model.
	 * If creation is successful, the browser will be redirected to the 'view' page.
	 */
	public function actionCreate()
	{
            $model=new Entry;

            // Uncomment the following line if AJAX validation is needed
            // $this->performAjaxValidation($model);

            if(isset($_POST['Entry']))
            {                  
                $model->attributes=$_POST['Entry'];                              
                $model->date = $_POST['date'];                
                $model->userId = Yii::app()->user->id;
                $model->updateTime = time();
                $model->createTime = time();
                $model->photo_id = isset($_POST['photo_id']) && count($_POST['photo_id']) > 0 ? true : null;
                $model->active = 1;
                
                if($model->save()) {
                
                    if(!empty($_POST['photo_id'])) {                    
                        foreach($_POST['photo_id'] as $val) {
                            $photoEntry = new EntryHasPhoto();
                            $photoEntry->entryId = $model->id;
                            $photoEntry->photoId = $val;
                            $photoEntry->save();
                        }
                    }
                
                    $this->redirect(array('view','id'=>$model->id));   
                }
            }

            $this->render('create',array(
                    'model'=>$model,
            ));
	}
        
        
        
        public function actionCropImage()
        {
            
            $bucketLargeDir = htmlspecialchars("golifted.com_large");
            $bucketSmallDir = htmlspecialchars("golifted.com_small");                                    
            
            // save large image
            $this->imageResize($bucketLargeDir,$_GET['imagename'],1600,1200,$_GET['orientation'],$_GET['cropWidth'],$_GET['cropHeight'],$_GET['topOffset'],$_GET['leftOffset']);
            
            // save small image
            $this->imageResize($bucketSmallDir,$_GET['imagename'],400,300,$_GET['orientation'],$_GET['cropWidth'],$_GET['cropHeight'],$_GET['topOffset'],$_GET['leftOffset']);                                                
        }
        
        public function imageResize($imageUrl,$fileName,$newWidth,$newHeight,$orientation,$cropWidth,$cropHeight,$topOffset,$leftOffset)
        {
            Yii::import('application.extensions.image.Image');
            $ornewWidth = 0;
            $ornewHeight = 0;
            if($orientation == 'portrait'){
                $ornewWidth = $newHeight;
                $ornewHeight = $newWidth;                
            } else {
                $ornewWidth = $newWidth;
                $ornewHeight = $newHeight;              
            }
            
            $bucket = "golifted.com_upload";
            
            
            file_put_contents('upload/'.$fileName, file_get_contents("http://s3.amazonaws.com/".$bucket."/".$fileName));
            
            $image = Yii::app()->image->load("upload/".$fileName);
                        
            $image->crop($cropWidth,$cropHeight,$topOffset,$leftOffset);       
            $image->resize($ornewWidth,$ornewHeight);
            $image->save("upload/".$fileName); 
            
            Yii::app()->s3->upload( 'upload/'.$fileName ,$fileName, $imageUrl );
            unlink('upload/'.$fileName);
            
            $return = "";
            // load small image
            if($newWidth < 500) {
                $result['source'] = "http://s3.amazonaws.com/".$imageUrl."/".$fileName;
                $result['photo_id'] = $this->p_id;
                $return = htmlspecialchars(json_encode($result), ENT_NOQUOTES);
                //echo "http://s3.amazonaws.com/".$imageUrl."/".$fileName;
            }
            echo $return;
        }
        
        public function actionRotateImage()
        {
            Yii::import('application.extensions.image.Image');
            $fileName = $_GET['imagename']; 
            $num = $_GET['num'];
            $bucket = "golifted.com_upload";                        
            file_put_contents('upload/'.$fileName, file_get_contents("http://s3.amazonaws.com/".$bucket."/".$fileName));                                                
            $image = Yii::app()->image->load("upload/".$fileName);                        
            $image->rotate(90*$num);       
            $image->save("upload/".$fileName);                              
            Yii::app()->s3->upload( 'upload/'.$fileName ,$fileName, $bucket );            
            unlink('upload/'.$fileName);
            echo "http://s3.amazonaws.com/".$bucket."/".$fileName;
        }
        
        public function actionRemoveImage()
        {
            $imgSrc = $_GET['imageSrc'];   
            $pid = $_GET['pid'];
            $bucketsArray = array( 'golifted.com_upload', 'golifted.com_large', 'golifted.com_small' );
            $this->deleteObjectArray($bucketsArray, $imgSrc);
            $photo = Photo::model()->findByPk($pid);    // our ID
            $photo->delete();   // Delete
        }
        
        private function deleteObjectArray($bucketsArray,$imgSrc) {
            foreach($bucketsArray as $bucket) {
                Yii::app()->s3->deleteObject($bucket,$imgSrc);  
            } 
        }
        
        public function actionLoadImage()
        {
            $imgSrc = $_GET['imageSrc'];
            $bucketsArray = array( 'golifted.com_large', 'golifted.com_small' );
            $this->deleteObjectArray($bucketsArray, $imgSrc);
            echo "http://s3.amazonaws.com/golifted.com_upload/".$imgSrc;
        }
                        
        public function actionEditImage()
        {            
            echo "http://s3.amazonaws.com/golifted.com_upload/".$_GET['imageSrc'];        
        }
                
	/**
	 * Updates a particular model.
	 * If update is successful, the browser will be redirected to the 'view' page.
	 * @param integer $id the ID of the model to be updated
	 */
        
                
        public $isUpdate;
        
        public $photoList = array();
        
	public function actionUpdate($id)
	{
            $model=$this->loadModel($id);                
            // Uncomment the following line if AJAX validation is needed
            // $this->performAjaxValidation($model);

            if(isset($_POST['Entry']))
            {
                $model->attributes=$_POST['Entry'];
                if($model->save())
                        $this->redirect(array('view','id'=>$model->id));
            }

            $this->isUpdate = 1;

            foreach($model->photos as $photo) {  
                array_push($this->photoList, array('id' => $photo->id, 'filename' => $photo->fileName) );
            }

            $this->render('update',array(
                    'model'=>$model,
                    'isUpdate'=>$this->isUpdate,
                    'photoList'=>$this->photoList,
            )); 
	}        
        
	/**
	 * Deletes a particular model.
	 * If deletion is successful, the browser will be redirected to the 'admin' page.
	 * @param integer $id the ID of the model to be deleted
	 */
	public function actionDelete($id)
	{
		$this->loadModel($id)->delete();

		// if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser
		if(!isset($_GET['ajax']))
			$this->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin'));
	}

	/**
	 * Lists all models.
	 */                
        
	public function actionIndex()
	{
            $dataProvider=new CActiveDataProvider('Entry');
            $this->render('index',array(
                    'dataProvider'=>$dataProvider,
            ));
	}

	/**
	 * Manages all models.
	 */
	public function actionAdmin()
	{
		$model=new Entry('search');
		$model->unsetAttributes();  // clear any default values
		if(isset($_GET['Entry']))
			$model->attributes=$_GET['Entry'];

		$this->render('admin',array(
			'model'=>$model,
		));
	}

	/**
	 * Returns the data model based on the primary key given in the GET variable.
	 * If the data model is not found, an HTTP exception will be raised.
	 * @param integer the ID of the model to be loaded
	 */
	public function loadModel($id)
	{
		$model=Entry::model()->findByPk($id);
		if($model===null)
			throw new CHttpException(404,'The requested page does not exist.');
		return $model;
	}

	/**
	 * Performs the AJAX validation.
	 * @param CModel the model to be validated
	 */
	protected function performAjaxValidation($model)
	{
		if(isset($_POST['ajax']) && $_POST['ajax']==='entry-form')
		{
			echo CActiveForm::validate($model);
			Yii::app()->end();
		}
	}
        
        
        
}
