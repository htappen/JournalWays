<?php

/**
 * This is the model class for table "photo".
 *
 * The followings are the available columns in table 'photo':
 * @property string $id
 * @property string $userId
 * @property string $updateTime
 * @property string $createTime
 * @property integer $active
 * @property string $fileName
 * @property string $fileExtension
 * @property integer $bytes
 * @property string $s3Key
 * @property string $s3Bucket
 * @property integer $isPortrait
 *
 * The followings are the available model relations:
 * @property Entry[] $entries
 * @property Page[] $pages
 * @property User $user
 */
class Photo extends TimeActiveRecord
{
	/**
	 * Returns the static model of the specified AR class.
	 * @param string $className active record class name.
	 * @return Photo the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'photo';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			array('userId, updateTime, fileName, fileExtension, bytes, s3Key, s3Bucket, isPortrait', 'required'),
			array('active, bytes, isPortrait', 'numerical', 'integerOnly'=>true),
			array('userId, fileExtension', 'length', 'max'=>10),
			array('fileName', 'length', 'max'=>300),
			array('s3Key, s3Bucket', 'length', 'max'=>150),
			array('createTime', 'safe'),
			// The following rule is used by search().
			// Please remove those attributes that should not be searched.
			array('id, userId, updateTime, createTime, active, fileName, fileExtension, bytes, s3Key, s3Bucket, isPortrait', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
			'entries' => array(self::MANY_MANY, 'Entry', 'entry_has_photo(photoId, entryId)'),
			'pages' => array(self::MANY_MANY, 'Page', 'page_has_photo(photoId, pageId)'),
			'user' => array(self::BELONGS_TO, 'User', 'userId'),
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'id' => 'ID',
			'userId' => 'User',
			'updateTime' => 'Update Time',
			'createTime' => 'Create Time',
			'active' => 'Active',
			'fileName' => 'File Name',
			'fileExtension' => 'File Extension',
			'bytes' => 'Bytes',
			's3Key' => 'S3 Key',
			's3Bucket' => 'S3 Bucket',
			'isPortrait' => 'Is Portrait',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.
	 */
	public function search()
	{
		// Warning: Please modify the following code to remove attributes that
		// should not be searched.

		$criteria=new CDbCriteria;

		$criteria->compare('id',$this->id,true);
		$criteria->compare('userId',$this->userId,true);
		$criteria->compare('updateTime',$this->updateTime,true);
		$criteria->compare('createTime',$this->createTime,true);
		$criteria->compare('active',$this->active);
		$criteria->compare('fileName',$this->fileName,true);
		$criteria->compare('fileExtension',$this->fileExtension,true);
		$criteria->compare('bytes',$this->bytes);
		$criteria->compare('s3Key',$this->s3Key,true);
		$criteria->compare('s3Bucket',$this->s3Bucket,true);
		$criteria->compare('isPortrait',$this->isPortrait);

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}
}